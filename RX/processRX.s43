;----------------------------------------------------------------------------------------------
#include "msp430g2553.h"
#include "../util/constants.h"
#include "../util/ordercomand.h"
;----------------------------------------------------------------------------------------------
        NAME   PRX
        PUBLIC READ_DATA_RX,READ_DATA_CERTIFICATE
        RSEG   CODE           
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
READ_DATA_CERTIFICATE
;----------------------------------------------------------------------------------------------
                   push    DATA_BUFFER
                   call    #READ_RX_MSG
                   pop     DATA_BUFFER
                   ret
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
READ_DATA_RX
;----------------------------------------------------------------------------------------------
                   mov.b   #NOT_TRX,DATA_STAT_TRX
                   push    DATA_BUFFER
                   cmp.b   #COMANDO_AT2,DATA_CONFIG_AT
                   jz      RRDRX2
                   cmp.b   #TEST_RADIO,DATA_ORDER_SOLIC
                   jz      HR_2 ; TESTE DE HARDWARE RETORNA 2 CARACTERES DE RESPOSTA
                   cmp.b   #SET_DEFAULT_NAME,DATA_ORDER_SOLIC
                   jz      HR_9 ; TESTE DE HARDWARE RETORNA 9 CARACTERES DE RESPOSTA
                   jmp     RRDRX ; IMPLEMENTAR OUTRAS VERIFICAÇÕES    
HR_9:              mov.b   #009h,DATA_LIMIT_IN
                   jmp     RRDRX
HR_2:              mov.b   #002h,DATA_LIMIT_IN                   
RRDRX:             call    #READ_RX_MSG
                   jmp     END_DT_RX
RRDRX2:            call    #READ_RX_MSG
END_DT_RX:         pop     DATA_BUFFER
                   ret
;----------------------------------------------------------------------------------------------                   
;----------------------------------------------------------------------------------------------
READ_RX_MSG      ; QUANDO A MENSAGEM QUE DEVERÁ SER RECEBIDA TEM FLAG INDICATIVO DE FINALIZAÇÃO
                 ; DE MENSAGEM
;----------------------------------------------------------------------------------------------                
RUN_TX:           
HOLD_ON:	   bit.b       #UCA0RXIFG,&IFG2	;RX BUFFER ESTA PRONTO
	           jz          HOLD_ON ; 
                   mov.b       &UCA0RXBUF,DATA_BUFFER
                   bic.b       #UCA0RXIFG,&IFG2
                   inc         DATA_BUFFER_RX_COUNT
                   cmp.b       #00001h,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_1
                   cmp.b       #NUM_2,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_2
                   cmp.b       #NUM_3,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_3
                   cmp.b       #NUM_4,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_4
                   cmp.b       #NUM_5,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_5
                   cmp.b       #NUM_6,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_6
                   cmp.b       #NUM_7,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_7
                   cmp.b       #NUM_8,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_8
                   cmp.b       #NUM_9,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_9
                   cmp.b       #NUM_10,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_10
                   cmp.b       #NUM_11,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_11
                   cmp.b       #NUM_12,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_12
                   cmp.b       #NUM_13,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_13
                   cmp.b       #NUM_14,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_14
                   cmp.b       #NUM_15,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_15
                   cmp.b       #NUM_16,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_16
                   cmp.b       #NUM_17,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_17
                   cmp.b       #NUM_18,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_18
                   cmp.b       #NUM_19,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_19
                   cmp.b       #NUM_20,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_20
                   cmp.b       #NUM_21,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_21
                   cmp.b       #NUM_22,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_22
                   cmp.b       #NUM_23,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_23
                   cmp.b       #NUM_24,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_24
                   cmp.b       #NUM_25,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_25
                   cmp.b       #NUM_26,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_26
                   cmp.b       #NUM_27,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_27
                   cmp.b       #NUM_28,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_28
                   cmp.b       #NUM_29,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_29
                   cmp.b       #NUM_30,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_30
                   cmp.b       #NUM_31,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_31
                   cmp.b       #NUM_32,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_32
                   cmp.b       #NUM_33,DATA_BUFFER_RX_COUNT
                   jeq         RECEPTION_BYTE_33
                   jmp         END_RECEPTION    
RECEPTION_BYTE_1:  mov.b       DATA_BUFFER,DATA1_IN
                   jmp         END_RECEPTION 
RECEPTION_BYTE_2:  mov.b       DATA_BUFFER,DATA2_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_3:  mov.b       DATA_BUFFER,DATA3_IN
                   jmp         END_RECEPTION 
RECEPTION_BYTE_4:  mov.b       DATA_BUFFER,DATA4_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_5:  mov.b       DATA_BUFFER,DATA5_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_6:  mov.b       DATA_BUFFER,DATA6_IN
                   jmp         END_RECEPTION  
RECEPTION_BYTE_7:  mov.b       DATA_BUFFER,DATA7_IN
                   jmp         END_RECEPTION      
RECEPTION_BYTE_8:  mov.b       DATA_BUFFER,DATA8_IN
                   jmp         END_RECEPTION        
RECEPTION_BYTE_9:  mov.b       DATA_BUFFER,DATA9_IN
                   jmp         END_RECEPTION      
RECEPTION_BYTE_10: mov.b       DATA_BUFFER,DATA10_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_11: mov.b       DATA_BUFFER,DATA11_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_12: mov.b       DATA_BUFFER,DATA12_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_13: mov.b       DATA_BUFFER,DATA13_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_14: mov.b       DATA_BUFFER,DATA14_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_15: mov.b       DATA_BUFFER,DATA15_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_16: mov.b       DATA_BUFFER,DATA16_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_17: mov.b       DATA_BUFFER,DATA17_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_18: mov.b       DATA_BUFFER,DATA18_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_19: mov.b       DATA_BUFFER,DATA19_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_20: mov.b       DATA_BUFFER,DATA20_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_21: mov.b       DATA_BUFFER,DATA21_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_22: mov.b       DATA_BUFFER,DATA22_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_23: mov.b       DATA_BUFFER,DATA23_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_24: mov.b       DATA_BUFFER,DATA24_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_25: mov.b       DATA_BUFFER,DATA25_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_26: mov.b       DATA_BUFFER,DATA26_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_27: mov.b       DATA_BUFFER,DATA27_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_28: mov.b       DATA_BUFFER,DATA28_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_29: mov.b       DATA_BUFFER,DATA29_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_30: mov.b       DATA_BUFFER,DATA30_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_31: mov.b       DATA_BUFFER,DATA31_IN
                   jmp         END_RECEPTION
RECEPTION_BYTE_32: mov.b       DATA_BUFFER,DATA32_IN
                   jmp         END_RECEPTION 
RECEPTION_BYTE_33: mov.b       DATA_BUFFER,DATA33_IN
                   jmp         END_RECEPTION                     
END_RECEPTION:     
VER_OPER_TYPE:     cmp.b       #CERTIFICATE_H,DATA_ORDER_SOLIC
                   jz          END_PROCESS
                   cmp.b       #COMANDO_AT2,DATA_CONFIG_AT
                   jz          VER_END_LINE
CONFIG_RESPONSE:   cmp.b       DATA_LIMIT_IN,DATA_BUFFER_RX_COUNT
                   jz          END_RX_P
                   jmp         END_PROCESS    
END_RX_P:          mov.b       #OK_TRX,DATA_STAT_TRX ; ADICIONAR AQUI ALGUM CONTROLE QUE INDIQUE QUE FINALIZOU A COMUNICAÇÃO
                   jmp         END_PROCESS
VER_END_LINE:      cmp.b       #00Ah,DATA_BUFFER ; CARACTER DE FINAL DE LINHA. IDENTIFICA FINAL DA MENSAGEM
                   jz          CONFIG_RESPONSE_L
                   jmp         END_PROCESS
CONFIG_RESPONSE_L: 
                   nop; AINDA NECESSARIO IMPLEMENTACAO                   
END_PROCESS:       ret
;----------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------
        END  
;----------------------------------------------------------------------------------------------